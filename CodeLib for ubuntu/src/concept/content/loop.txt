Loops :-

	1) for Loop :-

•	A "For" Loop is used to repeat a specific block of code a known number of times.

•	Loop is used to execute the block of code several times according to the condition given in the loop.

•	Syntax :-  for( initialization ; condition ; Incremnt/decrement){
				body
				....
			}
•	How it Works ? 

		1)The initialization statement is executed only once.
		2)Then, the condition is check.If the condition is evaluated to false, the for loop is terminated.
		3)However, if the condition is true, statements inside the body of the  for loop are executed, and the update expression is updated.
		4)Then they check the Increment/decrement and check the condition

This process goes on until the condition is false. When the condition is false, the loop terminates.
	ex:1)
		// Print numbers from 1 to 10

        			#include <stdio.h>
			void main() {
  				int i;
  				for (i = 1; i < 11; ++i) {

		    		printf("%d ", i);
	}
}

output :-  1 2 3 4 5 6 7 8 9 10.

	2) While Loop :-

•	A while loop in C programming repeatedly executes a target statement as long as a given condition is true.

•	Syntax :-   Initialization;
		     while(condition){
			body
			....
			Increment / Decrement;
		}

	ex:1) 
		#include <stdio.h>
		void main () {

   		/* local variable definition */
 		  int a = 10;

  		 /* while loop execution */
  		 while ( a < 20 ) {
      			printf("value of a: %d\n", a);
      			a++;
 		}
	}

	Output : value of a : 10
		   value of a : 11
			....
		   value of a : 19

	3)Do - While Loop :-

•	Do - While loop  is Posted tested loop.

•	 Using the do-while loop, we can repeat the execution of several parts of the statements. 

•	The do-while loop is mainly used in the case where we need to execute the loop at least once. 

•	The do-while loop is mostly used in menu-driven programs where the termination condition depends upon the end user.

•	Synatx :-  do{
			body
			....
			}while(condition);

	ex:
		#include<stdio.h>  
		void main ()  {  
    			char c;  
    			do{  
    				printf("\n1. Print Hello\n2. Core2web \n3. Exit\n");
    				int choice;  
    				scanf("%d",&choice);  

    				switch(choice)  
    				{  
        					case 1 :   
        						printf("Hello\n");   
        						break;  
        					case 2:    
       	 					printf("Core2web\n");  
        						break;  
        					case 3:  
        						exit(0);   
        						break;  
        					default:   
        						printf("please enter valid choice");      
   				 }  

    			getchar();
    			printf("do you want to enter more?");   
    			scanf("%c",&c);  

    			}while(c=='y' || c=='Y');  
		}  


Jump Statements :-


	1) Break Statement :-
•	The break statement terminates the execution of the nearest enclosing do, for, switch, or while statement in which it appears. 
•	Control passes to the statement that follows the terminated statement.
•	Within nested statements, the break statement terminates only the do, for, switch, or while statement that immediately encloses it.
	ex:1)
		#include <stdio.h>
void main() {
   for(int i=1 ; i<=5 ; i++ ) {
      printf( "%d ",i);
      if (i == 5)
          break;
   }
} // Loop exits only when i==5.

Output :- 1 2 3

	2)Continue Statement :-

•	The continue statement is used to bring the program control to the beginning of the loop.
 
•	The continue statement skips some lines of code inside the loop and continues with the next iteration. 

•	It is mainly used for a condition so that we can skip some code for a particular condition.

•	Syntax :- // loop statements.
			continue;
		  // Some lines of code which is to be skipped.

		ex:
			#include <stdio.h>
			void main() {

   				for(int i=1 ; i<=5 ; i++ ) {
      					printf( "%d ",i);
     		 			if (i == 3)
         		    			continue;

   				}

			} // Loop skip when i==3 and continues.

			Output :- 1 2 4 5	
	
	3)goto statement :-

•	The goto statement can be used to jump from anywhere to anywhere within a function.

•	Syntax :-  	Syntax1      |   Syntax2
			----------------------------
			goto label;  |    label:  
			                     |    .
			                     |    .
			   label:         |    goto label;

		 ex:
			#include<stdio.h>
			void main(){
				int x = 5;
				if(x==5){
					goto goodMorning;
				}
				goodMorning :
						printf("Good Morning\n");
				}
